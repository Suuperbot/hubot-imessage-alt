// Generated by CoffeeScript 1.10.0
(function () {
    var Adapter, AppleScript, Message, Pubsub, Redis, Response, Robot, TextMessage, User, iMessageAdapter, path, ref,
        extend = function (child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty,
        slice = [].slice,
        indexOf = [].indexOf || function (item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    ref = require('hubot'), User = ref.User, Robot = ref.Robot, Adapter = ref.Adapter, Message = ref.Message, TextMessage = ref.TextMessage, Response = ref.Response;

    AppleScript = require('applescript');

    path = require('path');

    Redis = require('redis');

    Pubsub = Redis.createClient();

    Pubsub.subscribe('hubot:incoming-imessage');

    var sqlite3 = require('sqlite3').verbose();

    iMessageAdapter = (function (superClass) {
        extend(iMessageAdapter, superClass);

        function iMessageAdapter(robot) {
            this.robot = robot;
        }

        iMessageAdapter.prototype.send = function () {
            var envelope, i, len, message, results, script, strings, user;
            envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            user = envelope.user.id;
            if (indexOf.call(this.allowedUsers, user) >= 0) {
                script = path.resolve(__dirname, 'Send iMessage.applescript');
                results = [];
                for (i = 0, len = strings.length; i < len; i++) {
                    message = strings[i];
                    results.push(AppleScript.execFile(script, [user, message], function (err, rtn) {
                        return console.log("send - ", user, message);
                    }));
                }
                return results;
            } else {
                return this.robot.logger.info('Refusing to send message to unauthorized iMessage user ' + user);
            }
        };

        iMessageAdapter.prototype.reply = function () {
            var envelope, strings;
            envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            return this.send.apply(this, [envelope].concat(slice.call(strings)));
        };

        iMessageAdapter.prototype.run = function () {
            this.allowedUsers = process.env.HUBOT_IMESSAGE_HANDLES.split(',');
            Pubsub.on('message', (function (_this) {
                return function (channel, dataString) {
                    var data, msg, ref1, user;
                    data = JSON.parse(dataString);
                    if (ref1 = data.userId, indexOf.call(_this.allowedUsers, ref1) >= 0) {
                        user = _this.robot.brain.userForId(data.userId);
                        user.name = data.name;
                        user.room = 'iMessage';
                        msg = ("" + data.message).replace("Gtbot", "gtbot");
                        console.log("run: ", msg);
                        return _this.receive(new TextMessage(user, msg));
                    } else {
                        return _this.robot.logger.info('Ignoring message from unauthorized iMessage user ' + data.userId);
                    }
                };
            })(this));
            return this.emit('connected');
        };

        return iMessageAdapter;

    })(Adapter);

    exports.use = function (robot) {
        return new iMessageAdapter(robot);
    };

}).call(this);

//# sourceMappingURL=imessage.js.map
